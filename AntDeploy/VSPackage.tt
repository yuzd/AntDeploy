<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".Designer.cs" #>

<#
const string BenchmarkLanguage = "en";

var resourceNameWithoutCulture = Path.GetFileNameWithoutExtension(Host.TemplateFile);
var resourceNamespace = Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint") ?? string.Empty;
var resourceFullNameWithoutCulture = resourceNamespace + "." + resourceNameWithoutCulture;
#>

// ------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by T4 Template.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Resources;

namespace <#= resourceNamespace#>
{
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings.
    /// </summary>
    static class <#= resourceNameWithoutCulture#>
    {
        static readonly ResourceManager Resx = new ResourceManager("<#= resourceFullNameWithoutCulture#>", typeof(<#= resourceNameWithoutCulture#>).Assembly);

<#
var resx = Path.ChangeExtension(Host.TemplateFile , BenchmarkLanguage + ".resx");
using(var reader = new ResXResourceReader(resx) { UseResXDataNodes = true })
{
	foreach (System.Collections.DictionaryEntry kv in reader)
	{
		var node = (ResXDataNode)kv.Value;
		if (node.FileRef == null)
		{
			var keyName = kv.Key.ToString();
			var propName = Regex.IsMatch(keyName , @"^\d+") ? "_" + keyName : keyName;
#>
        public static string <#= propName#> { get; } = Resx.GetString("<#= keyName#>");
<#
		}
	}
}
#>
    }
}